<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ezen.hang.heritage.domain.member.mapper.MemberMapper">

	<!--
	회원의 로그인 기능
	-->
	<select id="login" parameterType="Member" resultType="Member">
		SELECT M.USERID, M.USERNAME, M.IMAGEFILENAME, A.admin
		FROM MEMBER M
		JOIN AUTHORITY A ON M.USERID = A.USERID 
		WHERE M.USERID = #{userid}
		  AND M.USERPW = #{userpw};
	</select>

	<!--
	회원가입 시 사용하는 기능
	-->
	<insert id="CreateMember" parameterType="Member">
		INSERT INTO MEMBER
		(userid, userpw, username, email, userph, regdate, imagefilename)
		VALUES(#{userid}, #{userpw}, #{username}, #{email}, #{userph}, NOW(), '')
	</insert>
	
	<insert id="CreateAuthority" parameterType="Member">
		INSERT INTO AUTHORITY (USERID)
		VALUES(#{userid});
	</insert>

	<select id="checkUserId" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM MEMBER WHERE userId = #{userId}
	</select>
	
	<!--
	회원의 아이디를 찾거나 잃어버린 비밀번호는 변경해주는 기능
	-->
	<select id="lostIdSearch" parameterType="Member" resultType="Member">
		SELECT USERID 
		FROM MEMBER
		WHERE USERNAME = #{username}
		  AND USERPH = #{userph};
	</select>
	
	<update id="lostPasswordChange" parameterType="Member">
		UPDATE MEMBER
		SET USERPW = #{userpw}
		WHERE USERID = #{userid}
		  AND USERPH = #{userph}
		  AND EMAIL = #{email}
		  AND USERNAME = #{username};
	</update>

	<!--
	회원정보를 수정하는 기능
	-->
	<update id="update" parameterType="Member">
		UPDATE MEMBER SET
			<if test="username != null">username = #{username},</if>
			<if test="email != null">email = #{email},</if>
			<if test="userpw != null">userpw = #{userpw},</if>
			<if test="userph != null">userph = #{userph}</if>
		WHERE userid = #{userid}
		  AND (email IS NOT NULL
		   OR userpw IS NOT NULL
		   OR userph IS NOT NULL)
	</update>

	<select id="usingProfile" parameterType="String" resultType="Member">
		SELECT * FROM MEMBER WHERE userid = #{userid}
	</select>

	<!--
	프로필 사진 등록하는 기능
	-->
	<select id="profileUploadBefore" parameterType="string" resultType="int">
		SELECT COUNT(*) FROM PROFILEIMAGE WHERE USERID = #{userid};
	</select>
	
	<delete id="profileImageDelete" parameterType="string">
		DELETE FROM PROFILEIMAGE WHERE USERID = #{userid};
	</delete>
	
	<update id="memberDeleteProfileImg" parameterType="string">
		UPDATE MEMBER
		SET IMAGEFILENAME = NULL
		WHERE userid = #{userid};
	</update>
	
	<insert id="profileImgUpload" parameterType="map">
	    INSERT INTO PROFILEIMAGE (USERID, IMAGEFILENAME, IMAGEFILE)
	    VALUES (#{userid}, #{imagefilename}, #{imagefile})
	</insert>
	
	<update id="profileImgMemberUpload" parameterType="map">
		UPDATE MEMBER
  		SET IMAGEFILENAME = #{imagefilename}
 		WHERE USERID = #{userid}
	</update>
	
	<select id="profileImgLoading" parameterType="map" resultType="map">
		SELECT USERID, IMAGEFILENAME, IMAGEFILE 
		FROM PROFILEIMAGE
		WHERE userid = #{userid}
		  AND IMAGEFILENAME = #{imagefilename};
	</select>
	
	<!--
	회원이 북마크를 등록 삭제 변경하는 기능
	-->
	<insert id="createBookmark" parameterType="map">
		INSERT INTO BOOKMARK (USERID, CCBAKDCD, CCBAASNO, CCBACTCD , CCBAMNM1)
		VALUES (#{userid}, #{ccbaKdcd}, #{ccbaAsno}, #{ccbaCtcd}, #{ccbaMnm1});
	</insert>
	
   <select id="getBookmarkList" parameterType="string" resultType="map">
       SELECT USERID, CCBAASNO, CCBAMNM1, CCBAKDCD, CCBACTCD
       FROM BOOKMARK
       WHERE userid = #{userid}
       ORDER BY CCBAMNM1
   </select>
	
   <delete id="deleteBookmark" parameterType="map">
      DELETE
      FROM BOOKMARK
      WHERE USERID = #{userid}
        AND CCBAASNO = #{ccbaAsno};
   </delete>
   
   <!--
   회원이 스스로 탈퇴하는 기능
   -->
	<update id="userSelfWithdrawalHERITAGEREVIEW" parameterType="map">
		UPDATE HERITAGEREVIEW
		SET userid = '탈퇴회원', userEx = #{randomUUID}
		WHERE userid = #{userid};
	</update>
	
	<update id="userSelfWithdrawalRATE" parameterType="map">
		UPDATE RATE
		SET userid = '탈퇴회원', userEx = #{randomUUID}
		WHERE userid = #{userid};
	</update>
	
   <delete id="userSelfWithdrawalBOOKMARK" parameterType="string">
		DELETE 
		FROM BOOKMARK  
		WHERE USERID = #{userid};
   </delete>
   
   <delete id="userSelfWithdrawalPROFILEIMAGE" parameterType="string">
		DELETE 
		FROM PROFILEIMAGE
		WHERE USERID = #{userid};
   </delete>
   
   <delete id="userSelfrWithdrawalAUTHORITY" parameterType="string">
   		DELETE
   		FROM AUTHORITY
   		WHERE USERID = #{userid};
   </delete>
   
   <delete id="userSelfWithdrawalMEMBER" parameterType="string">
		DELETE 
		FROM MEMBER 
		WHERE USERID = #{userid};
   </delete>
   
</mapper>

	
	
